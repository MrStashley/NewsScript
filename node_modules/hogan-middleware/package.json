{
  "_from": "hogan-middleware",
  "_id": "hogan-middleware@0.2.2",
  "_inBundle": false,
  "_integrity": "sha1-IYCWxWUv1hDgLreyRBdhrHGO2Zg=",
  "_location": "/hogan-middleware",
  "_phantomChildren": {
    "mkdirp": "0.3.0",
    "nopt": "1.0.10"
  },
  "_requested": {
    "escapedName": "hogan-middleware",
    "fetchSpec": "latest",
    "name": "hogan-middleware",
    "raw": "hogan-middleware",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/hogan-middleware/-/hogan-middleware-0.2.2.tgz",
  "_shasum": "218096c5652fd610e02eb7b2441761ac718ed998",
  "_spec": "hogan-middleware",
  "_where": "C:\\Users\\colel\\Turbo\\SampleProject",
  "author": {
    "email": "steve@mydev.co",
    "name": "Steve King"
  },
  "bugs": {
    "url": "https://github.com/steveukx/hogan-middleware/issues"
  },
  "bundleDependencies": false,
  "contributors": [
    {
      "name": "Steve King",
      "email": "steve@mydev.co"
    }
  ],
  "dependencies": {
    "debug": "*",
    "hogan.js": "",
    "readdir": "*"
  },
  "deprecated": false,
  "description": "Middleware component to use Hogan.js mustache templates as views in an Express server",
  "devDependencies": {},
  "engines": {
    "node": ">= 0.8.0"
  },
  "homepage": "https://github.com/steveukx/hogan-middleware#readme",
  "keywords": [
    "connect",
    "express",
    "hogan",
    "middleware",
    "mustache",
    "template"
  ],
  "main": "./src/template-engine.js",
  "name": "hogan-middleware",
  "optionalDependencies": {},
  "readme": "hogan-middleware\n================\n\nMiddleware component to use Hogan.js mustache templates as views in an Express server\n\nUsage\n=====\n\n    var app = express();\n\n    app.configure(function () {\n      app.set('views', __dirname + '/views'); // tell express which directory your views are in\n      app.set('view engine', 'mustache');     // name your templates\n      app.engine('mustache', require('hogan-middleware').__express); // register the engine\n    });\n\nOnce registered, your routing in express can use a mustache file name as the view to be rendered:\n\n    app.get('/', req, res, next) {\n      res.render('home', { SiteName: 'My Website' });\n    }\n\nIn this case there is a file named `home.mustache` in the `views` directory that may have content as:\n\n    <!doctype html>\n    <html>\n      <head><title>Hello World</title></head>\n      <body>\n        <h1>{{SiteName}}</h1>\n      </body>\n    </html>\n    \nConfiguration\n=============\n\nOptional functionality in the middleware can be set before passing it into express:\n\n```\nvar hoganMiddleware = require('hogan-middleware');\nhoganMiddleware({\n   filter: ['**.mustache'],   // override the default file extension searched for\n                              // default is just the mustache file extension\n\n   flatten: true,             // make all partials available with just their file name\n                              // rather than the slash delimited path. default is enabled\n\n   watch: true                // set to false to remove the live updating watchers -\n                              // can be useful for running in production where files\n                              // will not be regularly changing.\n});\n\napp.engine('mustache', hoganMiddleware.__express);\n```\n\nPartial Templates\n=================\n\nMustache allows the use of partial templates, this is supported by the middleware component by making all templates\navailable as partial templates when rendering a template.\n\nWhen `home.mustache` is being used as the name of the template to be rendered, that can include `a.mustache` from the\nviews directory by adding `{{>a}}`. As `a.mustache` is rendered as a partial, that also has all templates available\nto it for use as partials, so could in turn have `{{>b}}` to include a nested partial.\n\nTo allow for a tidy source tree, templates can be in any number of sub-directories under the main views directory,\nthey are all made available for use as partials without any path identifier.\n\nNote - multiple templates with the same name but in different directories will overwrite each other. Set the\n`flatten` configuration option to false to always use the relative path as the name of the partials\n(ie: `{{>app/header}}` instead of just `{{>header}}`). Whether the `flatten` option is enabled or not, the relative\npath name will always be available.\n\nNote - don't include the same template as a partial inside itself.\n\nLive Updating\n=============\n\nAs express uses the the render engine for the first time, a series of watches are added to any sub-directory of the\nviews directory so that any changes are automatically reloaded for you while the server is still running.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/steveukx/hogan-middleware.git"
  },
  "version": "0.2.2"
}
